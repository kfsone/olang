tokens:
  # Literals will be declared as name.upper(), e.g. "print" -> PRINT
  definitions:
    SEMICOLON: ";"
    OPEN_PAREN: '\('
    CLOSE_PAREN: '\)'
    OPEN_BRACE: "{"
    CLOSE_BRACE: "}"
    EQUALS: "="

    PACKAGE: "package"
    PRINT: "print"
    FN: "fn"

    # Newline also swallows multi-line comments.
    NEWLINE: '([\r\n]|/\*(((?!\*/|\n).)*\n)+((?!\*/).)*\*/)+'

    IDENTIFIER: '\b[A-Za-z_][A-Za-z0-9_]*\b'

  # Regexes to ignore
  ignores:
    - '[\r\t ]+'
    - '//[^\n]*'
    - '/\*[^\n]*?\*/'

# production names must have an equivalent function tagged in grammar.py
productions:
  document:
      - newlines-allowed package-decl NEWLINE declarations newlines-allowed
      #- newlines-allowed package-decl newlines-allowed

  # semicolon indicates "more to come" and swallows newlines
  continuation:
    - SEMICOLON NEWLINE
    - SEMICOLON

  package-decl:
    - package-specifier package-name-decl

  package-specifier:
    - PACKAGE continuation

  package-name-decl:
    - IDENTIFIER

  newlines-allowed:
    - NEWLINE
    - /*EMPTY*/

  declarations:
    - declaration
    - declarations declaration

  declaration:
    - fn-decl

  fn-decl:
    - FN continuation fn-defn fn-body

  open-block:
    - continuation OPEN_BRACE
    - OPEN_BRACE

  fn-defn:
    - IDENTIFIER fn-args fn-returntype

  fn-returntype:
    - continuation IDENTIFIER
    - /*EMPTY*/

  fn-args:
    - OPEN_PAREN CLOSE_PAREN

  fn-body:
    - EQUALS expression
  #   - OPEN_BRACE newlines-allowed CLOSE_BRACE
  #   - OPEN_BRACE NEWLINE statement CLOSE_BRACE

  expression:
    - PACKAGE

  # statement:
  #   - single-stmt

  # single-stmt:
  #   - expression
